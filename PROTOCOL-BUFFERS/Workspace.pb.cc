// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Workspace.proto

#include "Workspace.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace DATA {
PROTOBUF_CONSTEXPR File::File(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.lines_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct FileDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FileDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FileDefaultTypeInternal() {}
  union {
    File _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FileDefaultTypeInternal _File_default_instance_;
PROTOBUF_CONSTEXPR Version_FilesEntry_DoNotUse::Version_FilesEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct Version_FilesEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Version_FilesEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Version_FilesEntry_DoNotUseDefaultTypeInternal() {}
  union {
    Version_FilesEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Version_FilesEntry_DoNotUseDefaultTypeInternal _Version_FilesEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR Version::Version(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.files_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.versionid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.createdtime_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.versionnumber_)*/0
  , /*decltype(_impl_.opsnumber_)*/0} {}
struct VersionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VersionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VersionDefaultTypeInternal() {}
  union {
    Version _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VersionDefaultTypeInternal _Version_default_instance_;
PROTOBUF_CONSTEXPR Project::Project(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.versions_)*/{}
  , /*decltype(_impl_.userid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.projectid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.projectname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.currentversion_)*/0} {}
struct ProjectDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ProjectDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ProjectDefaultTypeInternal() {}
  union {
    Project _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ProjectDefaultTypeInternal _Project_default_instance_;
PROTOBUF_CONSTEXPR Workspace_ProjectsEntry_DoNotUse::Workspace_ProjectsEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct Workspace_ProjectsEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Workspace_ProjectsEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Workspace_ProjectsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    Workspace_ProjectsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Workspace_ProjectsEntry_DoNotUseDefaultTypeInternal _Workspace_ProjectsEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR Workspace::Workspace(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.projects_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.userid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct WorkspaceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WorkspaceDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WorkspaceDefaultTypeInternal() {}
  union {
    Workspace _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WorkspaceDefaultTypeInternal _Workspace_default_instance_;
PROTOBUF_CONSTEXPR GitNote_WorkspacesEntry_DoNotUse::GitNote_WorkspacesEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct GitNote_WorkspacesEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GitNote_WorkspacesEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GitNote_WorkspacesEntry_DoNotUseDefaultTypeInternal() {}
  union {
    GitNote_WorkspacesEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GitNote_WorkspacesEntry_DoNotUseDefaultTypeInternal _GitNote_WorkspacesEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR GitNote::GitNote(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.workspaces_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GitNoteDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GitNoteDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GitNoteDefaultTypeInternal() {}
  union {
    GitNote _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GitNoteDefaultTypeInternal _GitNote_default_instance_;
}  // namespace DATA
static ::_pb::Metadata file_level_metadata_Workspace_2eproto[8];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_Workspace_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_Workspace_2eproto = nullptr;

const uint32_t TableStruct_Workspace_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::DATA::File, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::DATA::File, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::DATA::File, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::DATA::File, _impl_.lines_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::DATA::Version_FilesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::DATA::Version_FilesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::DATA::Version_FilesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::DATA::Version_FilesEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::DATA::Version, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::DATA::Version, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::DATA::Version, _impl_.versionid_),
  PROTOBUF_FIELD_OFFSET(::DATA::Version, _impl_.createdtime_),
  PROTOBUF_FIELD_OFFSET(::DATA::Version, _impl_.versionnumber_),
  PROTOBUF_FIELD_OFFSET(::DATA::Version, _impl_.opsnumber_),
  PROTOBUF_FIELD_OFFSET(::DATA::Version, _impl_.files_),
  0,
  1,
  2,
  3,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::DATA::Project, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::DATA::Project, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::DATA::Project, _impl_.userid_),
  PROTOBUF_FIELD_OFFSET(::DATA::Project, _impl_.projectid_),
  PROTOBUF_FIELD_OFFSET(::DATA::Project, _impl_.projectname_),
  PROTOBUF_FIELD_OFFSET(::DATA::Project, _impl_.currentversion_),
  PROTOBUF_FIELD_OFFSET(::DATA::Project, _impl_.versions_),
  0,
  1,
  2,
  3,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::DATA::Workspace_ProjectsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::DATA::Workspace_ProjectsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::DATA::Workspace_ProjectsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::DATA::Workspace_ProjectsEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::DATA::Workspace, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::DATA::Workspace, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::DATA::Workspace, _impl_.userid_),
  PROTOBUF_FIELD_OFFSET(::DATA::Workspace, _impl_.projects_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::DATA::GitNote_WorkspacesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::DATA::GitNote_WorkspacesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::DATA::GitNote_WorkspacesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::DATA::GitNote_WorkspacesEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DATA::GitNote, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::DATA::GitNote, _impl_.workspaces_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, -1, sizeof(::DATA::File)},
  { 10, 18, -1, sizeof(::DATA::Version_FilesEntry_DoNotUse)},
  { 20, 31, -1, sizeof(::DATA::Version)},
  { 36, 47, -1, sizeof(::DATA::Project)},
  { 52, 60, -1, sizeof(::DATA::Workspace_ProjectsEntry_DoNotUse)},
  { 62, 70, -1, sizeof(::DATA::Workspace)},
  { 72, 80, -1, sizeof(::DATA::GitNote_WorkspacesEntry_DoNotUse)},
  { 82, -1, -1, sizeof(::DATA::GitNote)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::DATA::_File_default_instance_._instance,
  &::DATA::_Version_FilesEntry_DoNotUse_default_instance_._instance,
  &::DATA::_Version_default_instance_._instance,
  &::DATA::_Project_default_instance_._instance,
  &::DATA::_Workspace_ProjectsEntry_DoNotUse_default_instance_._instance,
  &::DATA::_Workspace_default_instance_._instance,
  &::DATA::_GitNote_WorkspacesEntry_DoNotUse_default_instance_._instance,
  &::DATA::_GitNote_default_instance_._instance,
};

const char descriptor_table_protodef_Workspace_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017Workspace.proto\022\004DATA\"1\n\004File\022\021\n\004name\030"
  "\001 \001(\tH\000\210\001\001\022\r\n\005lines\030\002 \003(\tB\007\n\005_name\"\220\002\n\007V"
  "ersion\022\026\n\tversionID\030\001 \001(\tH\000\210\001\001\022\030\n\013create"
  "dTime\030\002 \001(\tH\001\210\001\001\022\032\n\rversionNumber\030\003 \001(\005H"
  "\002\210\001\001\022\026\n\topsNumber\030\004 \001(\005H\003\210\001\001\022\'\n\005files\030\005 "
  "\003(\0132\030.DATA.Version.FilesEntry\0328\n\nFilesEn"
  "try\022\013\n\003key\030\001 \001(\t\022\031\n\005value\030\002 \001(\0132\n.DATA.F"
  "ile:\0028\001B\014\n\n_versionIDB\016\n\014_createdTimeB\020\n"
  "\016_versionNumberB\014\n\n_opsNumber\"\312\001\n\007Projec"
  "t\022\023\n\006userID\030\001 \001(\tH\000\210\001\001\022\026\n\tprojectID\030\002 \001("
  "\tH\001\210\001\001\022\030\n\013projectName\030\003 \001(\tH\002\210\001\001\022\033\n\016curr"
  "entVersion\030\004 \001(\005H\003\210\001\001\022\037\n\010versions\030\005 \003(\0132"
  "\r.DATA.VersionB\t\n\007_userIDB\014\n\n_projectIDB"
  "\016\n\014_projectNameB\021\n\017_currentVersion\"\234\001\n\tW"
  "orkspace\022\023\n\006userID\030\001 \001(\tH\000\210\001\001\022/\n\010project"
  "s\030\002 \003(\0132\035.DATA.Workspace.ProjectsEntry\032>"
  "\n\rProjectsEntry\022\013\n\003key\030\001 \001(\t\022\034\n\005value\030\002 "
  "\001(\0132\r.DATA.Project:\0028\001B\t\n\007_userID\"\200\001\n\007Gi"
  "tNote\0221\n\nworkspaces\030\001 \003(\0132\035.DATA.GitNote"
  ".WorkspacesEntry\032B\n\017WorkspacesEntry\022\013\n\003k"
  "ey\030\001 \001(\t\022\036\n\005value\030\002 \001(\0132\017.DATA.Workspace"
  ":\0028\001b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_Workspace_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_Workspace_2eproto = {
    false, false, 852, descriptor_table_protodef_Workspace_2eproto,
    "Workspace.proto",
    &descriptor_table_Workspace_2eproto_once, nullptr, 0, 8,
    schemas, file_default_instances, TableStruct_Workspace_2eproto::offsets,
    file_level_metadata_Workspace_2eproto, file_level_enum_descriptors_Workspace_2eproto,
    file_level_service_descriptors_Workspace_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_Workspace_2eproto_getter() {
  return &descriptor_table_Workspace_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_Workspace_2eproto(&descriptor_table_Workspace_2eproto);
namespace DATA {

// ===================================================================

class File::_Internal {
 public:
  using HasBits = decltype(std::declval<File>()._impl_._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

File::File(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:DATA.File)
}
File::File(const File& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  File* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.lines_){from._impl_.lines_}
    , decltype(_impl_.name_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:DATA.File)
}

inline void File::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.lines_){arena}
    , decltype(_impl_.name_){}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

File::~File() {
  // @@protoc_insertion_point(destructor:DATA.File)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void File::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.lines_.~RepeatedPtrField();
  _impl_.name_.Destroy();
}

void File::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void File::Clear() {
// @@protoc_insertion_point(message_clear_start:DATA.File)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.lines_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.name_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* File::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "DATA.File.name"));
        } else
          goto handle_unusual;
        continue;
      // repeated string lines = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_lines();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "DATA.File.lines"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* File::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DATA.File)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional string name = 1;
  if (_internal_has_name()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "DATA.File.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // repeated string lines = 2;
  for (int i = 0, n = this->_internal_lines_size(); i < n; i++) {
    const auto& s = this->_internal_lines(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "DATA.File.lines");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DATA.File)
  return target;
}

size_t File::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DATA.File)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string lines = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.lines_.size());
  for (int i = 0, n = _impl_.lines_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.lines_.Get(i));
  }

  // optional string name = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData File::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    File::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*File::GetClassData() const { return &_class_data_; }


void File::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<File*>(&to_msg);
  auto& from = static_cast<const File&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:DATA.File)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.lines_.MergeFrom(from._impl_.lines_);
  if (from._internal_has_name()) {
    _this->_internal_set_name(from._internal_name());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void File::CopyFrom(const File& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DATA.File)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool File::IsInitialized() const {
  return true;
}

void File::InternalSwap(File* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.lines_.InternalSwap(&other->_impl_.lines_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata File::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Workspace_2eproto_getter, &descriptor_table_Workspace_2eproto_once,
      file_level_metadata_Workspace_2eproto[0]);
}

// ===================================================================

Version_FilesEntry_DoNotUse::Version_FilesEntry_DoNotUse() {}
Version_FilesEntry_DoNotUse::Version_FilesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Version_FilesEntry_DoNotUse::MergeFrom(const Version_FilesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Version_FilesEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Workspace_2eproto_getter, &descriptor_table_Workspace_2eproto_once,
      file_level_metadata_Workspace_2eproto[1]);
}

// ===================================================================

class Version::_Internal {
 public:
  using HasBits = decltype(std::declval<Version>()._impl_._has_bits_);
  static void set_has_versionid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_createdtime(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_versionnumber(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_opsnumber(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

Version::Version(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &Version::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:DATA.Version)
}
Version::Version(const Version& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Version* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_.files_)*/{}
    , decltype(_impl_.versionid_){}
    , decltype(_impl_.createdtime_){}
    , decltype(_impl_.versionnumber_){}
    , decltype(_impl_.opsnumber_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.files_.MergeFrom(from._impl_.files_);
  _impl_.versionid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.versionid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_versionid()) {
    _this->_impl_.versionid_.Set(from._internal_versionid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.createdtime_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.createdtime_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_createdtime()) {
    _this->_impl_.createdtime_.Set(from._internal_createdtime(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.versionnumber_, &from._impl_.versionnumber_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.opsnumber_) -
    reinterpret_cast<char*>(&_impl_.versionnumber_)) + sizeof(_impl_.opsnumber_));
  // @@protoc_insertion_point(copy_constructor:DATA.Version)
}

inline void Version::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_.files_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.versionid_){}
    , decltype(_impl_.createdtime_){}
    , decltype(_impl_.versionnumber_){0}
    , decltype(_impl_.opsnumber_){0}
  };
  _impl_.versionid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.versionid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.createdtime_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.createdtime_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Version::~Version() {
  // @@protoc_insertion_point(destructor:DATA.Version)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void Version::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.files_.Destruct();
  _impl_.files_.~MapField();
  _impl_.versionid_.Destroy();
  _impl_.createdtime_.Destroy();
}

void Version::ArenaDtor(void* object) {
  Version* _this = reinterpret_cast< Version* >(object);
  _this->_impl_.files_.Destruct();
}
void Version::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Version::Clear() {
// @@protoc_insertion_point(message_clear_start:DATA.Version)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.files_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.versionid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.createdtime_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&_impl_.versionnumber_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.opsnumber_) -
        reinterpret_cast<char*>(&_impl_.versionnumber_)) + sizeof(_impl_.opsnumber_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Version::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string versionID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_versionid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "DATA.Version.versionID"));
        } else
          goto handle_unusual;
        continue;
      // optional string createdTime = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_createdtime();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "DATA.Version.createdTime"));
        } else
          goto handle_unusual;
        continue;
      // optional int32 versionNumber = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_versionnumber(&has_bits);
          _impl_.versionnumber_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 opsNumber = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_opsnumber(&has_bits);
          _impl_.opsnumber_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<string, .DATA.File> files = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.files_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Version::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DATA.Version)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional string versionID = 1;
  if (_internal_has_versionid()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_versionid().data(), static_cast<int>(this->_internal_versionid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "DATA.Version.versionID");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_versionid(), target);
  }

  // optional string createdTime = 2;
  if (_internal_has_createdtime()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_createdtime().data(), static_cast<int>(this->_internal_createdtime().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "DATA.Version.createdTime");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_createdtime(), target);
  }

  // optional int32 versionNumber = 3;
  if (_internal_has_versionnumber()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_versionnumber(), target);
  }

  // optional int32 opsNumber = 4;
  if (_internal_has_opsnumber()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_opsnumber(), target);
  }

  // map<string, .DATA.File> files = 5;
  if (!this->_internal_files().empty()) {
    using MapType = ::_pb::Map<std::string, ::DATA::File>;
    using WireHelper = Version_FilesEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_files();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "DATA.Version.FilesEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(5, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(5, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DATA.Version)
  return target;
}

size_t Version::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DATA.Version)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .DATA.File> files = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_files_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::DATA::File >::const_iterator
      it = this->_internal_files().begin();
      it != this->_internal_files().end(); ++it) {
    total_size += Version_FilesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string versionID = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_versionid());
    }

    // optional string createdTime = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_createdtime());
    }

    // optional int32 versionNumber = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_versionnumber());
    }

    // optional int32 opsNumber = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_opsnumber());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Version::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Version::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Version::GetClassData() const { return &_class_data_; }


void Version::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Version*>(&to_msg);
  auto& from = static_cast<const Version&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:DATA.Version)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.files_.MergeFrom(from._impl_.files_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_versionid(from._internal_versionid());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_createdtime(from._internal_createdtime());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.versionnumber_ = from._impl_.versionnumber_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.opsnumber_ = from._impl_.opsnumber_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Version::CopyFrom(const Version& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DATA.Version)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Version::IsInitialized() const {
  return true;
}

void Version::InternalSwap(Version* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.files_.InternalSwap(&other->_impl_.files_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.versionid_, lhs_arena,
      &other->_impl_.versionid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.createdtime_, lhs_arena,
      &other->_impl_.createdtime_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Version, _impl_.opsnumber_)
      + sizeof(Version::_impl_.opsnumber_)
      - PROTOBUF_FIELD_OFFSET(Version, _impl_.versionnumber_)>(
          reinterpret_cast<char*>(&_impl_.versionnumber_),
          reinterpret_cast<char*>(&other->_impl_.versionnumber_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Version::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Workspace_2eproto_getter, &descriptor_table_Workspace_2eproto_once,
      file_level_metadata_Workspace_2eproto[2]);
}

// ===================================================================

class Project::_Internal {
 public:
  using HasBits = decltype(std::declval<Project>()._impl_._has_bits_);
  static void set_has_userid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_projectid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_projectname(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_currentversion(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

Project::Project(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:DATA.Project)
}
Project::Project(const Project& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Project* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.versions_){from._impl_.versions_}
    , decltype(_impl_.userid_){}
    , decltype(_impl_.projectid_){}
    , decltype(_impl_.projectname_){}
    , decltype(_impl_.currentversion_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.userid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.userid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_userid()) {
    _this->_impl_.userid_.Set(from._internal_userid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.projectid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.projectid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_projectid()) {
    _this->_impl_.projectid_.Set(from._internal_projectid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.projectname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.projectname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_projectname()) {
    _this->_impl_.projectname_.Set(from._internal_projectname(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.currentversion_ = from._impl_.currentversion_;
  // @@protoc_insertion_point(copy_constructor:DATA.Project)
}

inline void Project::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.versions_){arena}
    , decltype(_impl_.userid_){}
    , decltype(_impl_.projectid_){}
    , decltype(_impl_.projectname_){}
    , decltype(_impl_.currentversion_){0}
  };
  _impl_.userid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.userid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.projectid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.projectid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.projectname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.projectname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Project::~Project() {
  // @@protoc_insertion_point(destructor:DATA.Project)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Project::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.versions_.~RepeatedPtrField();
  _impl_.userid_.Destroy();
  _impl_.projectid_.Destroy();
  _impl_.projectname_.Destroy();
}

void Project::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Project::Clear() {
// @@protoc_insertion_point(message_clear_start:DATA.Project)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.versions_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.userid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.projectid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.projectname_.ClearNonDefaultToEmpty();
    }
  }
  _impl_.currentversion_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Project::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string userID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_userid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "DATA.Project.userID"));
        } else
          goto handle_unusual;
        continue;
      // optional string projectID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_projectid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "DATA.Project.projectID"));
        } else
          goto handle_unusual;
        continue;
      // optional string projectName = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_projectname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "DATA.Project.projectName"));
        } else
          goto handle_unusual;
        continue;
      // optional int32 currentVersion = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_currentversion(&has_bits);
          _impl_.currentversion_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .DATA.Version versions = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_versions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Project::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DATA.Project)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional string userID = 1;
  if (_internal_has_userid()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_userid().data(), static_cast<int>(this->_internal_userid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "DATA.Project.userID");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_userid(), target);
  }

  // optional string projectID = 2;
  if (_internal_has_projectid()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_projectid().data(), static_cast<int>(this->_internal_projectid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "DATA.Project.projectID");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_projectid(), target);
  }

  // optional string projectName = 3;
  if (_internal_has_projectname()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_projectname().data(), static_cast<int>(this->_internal_projectname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "DATA.Project.projectName");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_projectname(), target);
  }

  // optional int32 currentVersion = 4;
  if (_internal_has_currentversion()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_currentversion(), target);
  }

  // repeated .DATA.Version versions = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_versions_size()); i < n; i++) {
    const auto& repfield = this->_internal_versions(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DATA.Project)
  return target;
}

size_t Project::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DATA.Project)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .DATA.Version versions = 5;
  total_size += 1UL * this->_internal_versions_size();
  for (const auto& msg : this->_impl_.versions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string userID = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_userid());
    }

    // optional string projectID = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_projectid());
    }

    // optional string projectName = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_projectname());
    }

    // optional int32 currentVersion = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_currentversion());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Project::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Project::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Project::GetClassData() const { return &_class_data_; }


void Project::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Project*>(&to_msg);
  auto& from = static_cast<const Project&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:DATA.Project)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.versions_.MergeFrom(from._impl_.versions_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_userid(from._internal_userid());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_projectid(from._internal_projectid());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_projectname(from._internal_projectname());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.currentversion_ = from._impl_.currentversion_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Project::CopyFrom(const Project& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DATA.Project)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Project::IsInitialized() const {
  return true;
}

void Project::InternalSwap(Project* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.versions_.InternalSwap(&other->_impl_.versions_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.userid_, lhs_arena,
      &other->_impl_.userid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.projectid_, lhs_arena,
      &other->_impl_.projectid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.projectname_, lhs_arena,
      &other->_impl_.projectname_, rhs_arena
  );
  swap(_impl_.currentversion_, other->_impl_.currentversion_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Project::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Workspace_2eproto_getter, &descriptor_table_Workspace_2eproto_once,
      file_level_metadata_Workspace_2eproto[3]);
}

// ===================================================================

Workspace_ProjectsEntry_DoNotUse::Workspace_ProjectsEntry_DoNotUse() {}
Workspace_ProjectsEntry_DoNotUse::Workspace_ProjectsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Workspace_ProjectsEntry_DoNotUse::MergeFrom(const Workspace_ProjectsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Workspace_ProjectsEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Workspace_2eproto_getter, &descriptor_table_Workspace_2eproto_once,
      file_level_metadata_Workspace_2eproto[4]);
}

// ===================================================================

class Workspace::_Internal {
 public:
  using HasBits = decltype(std::declval<Workspace>()._impl_._has_bits_);
  static void set_has_userid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Workspace::Workspace(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &Workspace::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:DATA.Workspace)
}
Workspace::Workspace(const Workspace& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Workspace* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_.projects_)*/{}
    , decltype(_impl_.userid_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.projects_.MergeFrom(from._impl_.projects_);
  _impl_.userid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.userid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_userid()) {
    _this->_impl_.userid_.Set(from._internal_userid(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:DATA.Workspace)
}

inline void Workspace::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_.projects_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.userid_){}
  };
  _impl_.userid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.userid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Workspace::~Workspace() {
  // @@protoc_insertion_point(destructor:DATA.Workspace)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void Workspace::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.projects_.Destruct();
  _impl_.projects_.~MapField();
  _impl_.userid_.Destroy();
}

void Workspace::ArenaDtor(void* object) {
  Workspace* _this = reinterpret_cast< Workspace* >(object);
  _this->_impl_.projects_.Destruct();
}
void Workspace::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Workspace::Clear() {
// @@protoc_insertion_point(message_clear_start:DATA.Workspace)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.projects_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.userid_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Workspace::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string userID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_userid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "DATA.Workspace.userID"));
        } else
          goto handle_unusual;
        continue;
      // map<string, .DATA.Project> projects = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.projects_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Workspace::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DATA.Workspace)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional string userID = 1;
  if (_internal_has_userid()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_userid().data(), static_cast<int>(this->_internal_userid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "DATA.Workspace.userID");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_userid(), target);
  }

  // map<string, .DATA.Project> projects = 2;
  if (!this->_internal_projects().empty()) {
    using MapType = ::_pb::Map<std::string, ::DATA::Project>;
    using WireHelper = Workspace_ProjectsEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_projects();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "DATA.Workspace.ProjectsEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(2, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(2, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DATA.Workspace)
  return target;
}

size_t Workspace::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DATA.Workspace)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .DATA.Project> projects = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_projects_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::DATA::Project >::const_iterator
      it = this->_internal_projects().begin();
      it != this->_internal_projects().end(); ++it) {
    total_size += Workspace_ProjectsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // optional string userID = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_userid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Workspace::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Workspace::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Workspace::GetClassData() const { return &_class_data_; }


void Workspace::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Workspace*>(&to_msg);
  auto& from = static_cast<const Workspace&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:DATA.Workspace)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.projects_.MergeFrom(from._impl_.projects_);
  if (from._internal_has_userid()) {
    _this->_internal_set_userid(from._internal_userid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Workspace::CopyFrom(const Workspace& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DATA.Workspace)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Workspace::IsInitialized() const {
  return true;
}

void Workspace::InternalSwap(Workspace* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.projects_.InternalSwap(&other->_impl_.projects_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.userid_, lhs_arena,
      &other->_impl_.userid_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Workspace::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Workspace_2eproto_getter, &descriptor_table_Workspace_2eproto_once,
      file_level_metadata_Workspace_2eproto[5]);
}

// ===================================================================

GitNote_WorkspacesEntry_DoNotUse::GitNote_WorkspacesEntry_DoNotUse() {}
GitNote_WorkspacesEntry_DoNotUse::GitNote_WorkspacesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void GitNote_WorkspacesEntry_DoNotUse::MergeFrom(const GitNote_WorkspacesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata GitNote_WorkspacesEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Workspace_2eproto_getter, &descriptor_table_Workspace_2eproto_once,
      file_level_metadata_Workspace_2eproto[6]);
}

// ===================================================================

class GitNote::_Internal {
 public:
};

GitNote::GitNote(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &GitNote::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:DATA.GitNote)
}
GitNote::GitNote(const GitNote& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GitNote* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.workspaces_)*/{}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.workspaces_.MergeFrom(from._impl_.workspaces_);
  // @@protoc_insertion_point(copy_constructor:DATA.GitNote)
}

inline void GitNote::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.workspaces_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GitNote::~GitNote() {
  // @@protoc_insertion_point(destructor:DATA.GitNote)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void GitNote::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.workspaces_.Destruct();
  _impl_.workspaces_.~MapField();
}

void GitNote::ArenaDtor(void* object) {
  GitNote* _this = reinterpret_cast< GitNote* >(object);
  _this->_impl_.workspaces_.Destruct();
}
void GitNote::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GitNote::Clear() {
// @@protoc_insertion_point(message_clear_start:DATA.GitNote)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.workspaces_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GitNote::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // map<string, .DATA.Workspace> workspaces = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.workspaces_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GitNote::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DATA.GitNote)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, .DATA.Workspace> workspaces = 1;
  if (!this->_internal_workspaces().empty()) {
    using MapType = ::_pb::Map<std::string, ::DATA::Workspace>;
    using WireHelper = GitNote_WorkspacesEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_workspaces();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "DATA.GitNote.WorkspacesEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DATA.GitNote)
  return target;
}

size_t GitNote::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DATA.GitNote)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .DATA.Workspace> workspaces = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_workspaces_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::DATA::Workspace >::const_iterator
      it = this->_internal_workspaces().begin();
      it != this->_internal_workspaces().end(); ++it) {
    total_size += GitNote_WorkspacesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GitNote::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GitNote::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GitNote::GetClassData() const { return &_class_data_; }


void GitNote::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GitNote*>(&to_msg);
  auto& from = static_cast<const GitNote&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:DATA.GitNote)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.workspaces_.MergeFrom(from._impl_.workspaces_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GitNote::CopyFrom(const GitNote& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DATA.GitNote)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GitNote::IsInitialized() const {
  return true;
}

void GitNote::InternalSwap(GitNote* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.workspaces_.InternalSwap(&other->_impl_.workspaces_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GitNote::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Workspace_2eproto_getter, &descriptor_table_Workspace_2eproto_once,
      file_level_metadata_Workspace_2eproto[7]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace DATA
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::DATA::File*
Arena::CreateMaybeMessage< ::DATA::File >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DATA::File >(arena);
}
template<> PROTOBUF_NOINLINE ::DATA::Version_FilesEntry_DoNotUse*
Arena::CreateMaybeMessage< ::DATA::Version_FilesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DATA::Version_FilesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::DATA::Version*
Arena::CreateMaybeMessage< ::DATA::Version >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DATA::Version >(arena);
}
template<> PROTOBUF_NOINLINE ::DATA::Project*
Arena::CreateMaybeMessage< ::DATA::Project >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DATA::Project >(arena);
}
template<> PROTOBUF_NOINLINE ::DATA::Workspace_ProjectsEntry_DoNotUse*
Arena::CreateMaybeMessage< ::DATA::Workspace_ProjectsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DATA::Workspace_ProjectsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::DATA::Workspace*
Arena::CreateMaybeMessage< ::DATA::Workspace >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DATA::Workspace >(arena);
}
template<> PROTOBUF_NOINLINE ::DATA::GitNote_WorkspacesEntry_DoNotUse*
Arena::CreateMaybeMessage< ::DATA::GitNote_WorkspacesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DATA::GitNote_WorkspacesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::DATA::GitNote*
Arena::CreateMaybeMessage< ::DATA::GitNote >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DATA::GitNote >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
