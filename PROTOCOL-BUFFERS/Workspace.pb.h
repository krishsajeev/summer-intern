// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Workspace.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Workspace_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Workspace_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Workspace_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Workspace_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Workspace_2eproto;
namespace DATA {
class File;
struct FileDefaultTypeInternal;
extern FileDefaultTypeInternal _File_default_instance_;
class GitNote;
struct GitNoteDefaultTypeInternal;
extern GitNoteDefaultTypeInternal _GitNote_default_instance_;
class GitNote_WorkspacesEntry_DoNotUse;
struct GitNote_WorkspacesEntry_DoNotUseDefaultTypeInternal;
extern GitNote_WorkspacesEntry_DoNotUseDefaultTypeInternal _GitNote_WorkspacesEntry_DoNotUse_default_instance_;
class Project;
struct ProjectDefaultTypeInternal;
extern ProjectDefaultTypeInternal _Project_default_instance_;
class Version;
struct VersionDefaultTypeInternal;
extern VersionDefaultTypeInternal _Version_default_instance_;
class Version_FilesEntry_DoNotUse;
struct Version_FilesEntry_DoNotUseDefaultTypeInternal;
extern Version_FilesEntry_DoNotUseDefaultTypeInternal _Version_FilesEntry_DoNotUse_default_instance_;
class Workspace;
struct WorkspaceDefaultTypeInternal;
extern WorkspaceDefaultTypeInternal _Workspace_default_instance_;
class Workspace_ProjectsEntry_DoNotUse;
struct Workspace_ProjectsEntry_DoNotUseDefaultTypeInternal;
extern Workspace_ProjectsEntry_DoNotUseDefaultTypeInternal _Workspace_ProjectsEntry_DoNotUse_default_instance_;
}  // namespace DATA
PROTOBUF_NAMESPACE_OPEN
template<> ::DATA::File* Arena::CreateMaybeMessage<::DATA::File>(Arena*);
template<> ::DATA::GitNote* Arena::CreateMaybeMessage<::DATA::GitNote>(Arena*);
template<> ::DATA::GitNote_WorkspacesEntry_DoNotUse* Arena::CreateMaybeMessage<::DATA::GitNote_WorkspacesEntry_DoNotUse>(Arena*);
template<> ::DATA::Project* Arena::CreateMaybeMessage<::DATA::Project>(Arena*);
template<> ::DATA::Version* Arena::CreateMaybeMessage<::DATA::Version>(Arena*);
template<> ::DATA::Version_FilesEntry_DoNotUse* Arena::CreateMaybeMessage<::DATA::Version_FilesEntry_DoNotUse>(Arena*);
template<> ::DATA::Workspace* Arena::CreateMaybeMessage<::DATA::Workspace>(Arena*);
template<> ::DATA::Workspace_ProjectsEntry_DoNotUse* Arena::CreateMaybeMessage<::DATA::Workspace_ProjectsEntry_DoNotUse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace DATA {

// ===================================================================

class File final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DATA.File) */ {
 public:
  inline File() : File(nullptr) {}
  ~File() override;
  explicit PROTOBUF_CONSTEXPR File(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  File(const File& from);
  File(File&& from) noexcept
    : File() {
    *this = ::std::move(from);
  }

  inline File& operator=(const File& from) {
    CopyFrom(from);
    return *this;
  }
  inline File& operator=(File&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const File& default_instance() {
    return *internal_default_instance();
  }
  static inline const File* internal_default_instance() {
    return reinterpret_cast<const File*>(
               &_File_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(File& a, File& b) {
    a.Swap(&b);
  }
  inline void Swap(File* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(File* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  File* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<File>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const File& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const File& from) {
    File::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(File* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DATA.File";
  }
  protected:
  explicit File(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLinesFieldNumber = 2,
    kNameFieldNumber = 1,
  };
  // repeated string lines = 2;
  int lines_size() const;
  private:
  int _internal_lines_size() const;
  public:
  void clear_lines();
  const std::string& lines(int index) const;
  std::string* mutable_lines(int index);
  void set_lines(int index, const std::string& value);
  void set_lines(int index, std::string&& value);
  void set_lines(int index, const char* value);
  void set_lines(int index, const char* value, size_t size);
  std::string* add_lines();
  void add_lines(const std::string& value);
  void add_lines(std::string&& value);
  void add_lines(const char* value);
  void add_lines(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& lines() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_lines();
  private:
  const std::string& _internal_lines(int index) const;
  std::string* _internal_add_lines();
  public:

  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:DATA.File)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> lines_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Workspace_2eproto;
};
// -------------------------------------------------------------------

class Version_FilesEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Version_FilesEntry_DoNotUse, 
    std::string, ::DATA::File,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Version_FilesEntry_DoNotUse, 
    std::string, ::DATA::File,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  Version_FilesEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR Version_FilesEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit Version_FilesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Version_FilesEntry_DoNotUse& other);
  static const Version_FilesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Version_FilesEntry_DoNotUse*>(&_Version_FilesEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "DATA.Version.FilesEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_Workspace_2eproto;
};

// -------------------------------------------------------------------

class Version final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DATA.Version) */ {
 public:
  inline Version() : Version(nullptr) {}
  ~Version() override;
  explicit PROTOBUF_CONSTEXPR Version(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Version(const Version& from);
  Version(Version&& from) noexcept
    : Version() {
    *this = ::std::move(from);
  }

  inline Version& operator=(const Version& from) {
    CopyFrom(from);
    return *this;
  }
  inline Version& operator=(Version&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Version& default_instance() {
    return *internal_default_instance();
  }
  static inline const Version* internal_default_instance() {
    return reinterpret_cast<const Version*>(
               &_Version_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Version& a, Version& b) {
    a.Swap(&b);
  }
  inline void Swap(Version* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Version* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Version* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Version>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Version& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Version& from) {
    Version::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Version* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DATA.Version";
  }
  protected:
  explicit Version(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kFilesFieldNumber = 5,
    kVersionIDFieldNumber = 1,
    kCreatedTimeFieldNumber = 2,
    kVersionNumberFieldNumber = 3,
    kOpsNumberFieldNumber = 4,
  };
  // map<string, .DATA.File> files = 5;
  int files_size() const;
  private:
  int _internal_files_size() const;
  public:
  void clear_files();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::DATA::File >&
      _internal_files() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::DATA::File >*
      _internal_mutable_files();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::DATA::File >&
      files() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::DATA::File >*
      mutable_files();

  // optional string versionID = 1;
  bool has_versionid() const;
  private:
  bool _internal_has_versionid() const;
  public:
  void clear_versionid();
  const std::string& versionid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_versionid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_versionid();
  PROTOBUF_NODISCARD std::string* release_versionid();
  void set_allocated_versionid(std::string* versionid);
  private:
  const std::string& _internal_versionid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_versionid(const std::string& value);
  std::string* _internal_mutable_versionid();
  public:

  // optional string createdTime = 2;
  bool has_createdtime() const;
  private:
  bool _internal_has_createdtime() const;
  public:
  void clear_createdtime();
  const std::string& createdtime() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_createdtime(ArgT0&& arg0, ArgT... args);
  std::string* mutable_createdtime();
  PROTOBUF_NODISCARD std::string* release_createdtime();
  void set_allocated_createdtime(std::string* createdtime);
  private:
  const std::string& _internal_createdtime() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_createdtime(const std::string& value);
  std::string* _internal_mutable_createdtime();
  public:

  // optional int32 versionNumber = 3;
  bool has_versionnumber() const;
  private:
  bool _internal_has_versionnumber() const;
  public:
  void clear_versionnumber();
  int32_t versionnumber() const;
  void set_versionnumber(int32_t value);
  private:
  int32_t _internal_versionnumber() const;
  void _internal_set_versionnumber(int32_t value);
  public:

  // optional int32 opsNumber = 4;
  bool has_opsnumber() const;
  private:
  bool _internal_has_opsnumber() const;
  public:
  void clear_opsnumber();
  int32_t opsnumber() const;
  void set_opsnumber(int32_t value);
  private:
  int32_t _internal_opsnumber() const;
  void _internal_set_opsnumber(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:DATA.Version)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        Version_FilesEntry_DoNotUse,
        std::string, ::DATA::File,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> files_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr versionid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr createdtime_;
    int32_t versionnumber_;
    int32_t opsnumber_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Workspace_2eproto;
};
// -------------------------------------------------------------------

class Project final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DATA.Project) */ {
 public:
  inline Project() : Project(nullptr) {}
  ~Project() override;
  explicit PROTOBUF_CONSTEXPR Project(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Project(const Project& from);
  Project(Project&& from) noexcept
    : Project() {
    *this = ::std::move(from);
  }

  inline Project& operator=(const Project& from) {
    CopyFrom(from);
    return *this;
  }
  inline Project& operator=(Project&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Project& default_instance() {
    return *internal_default_instance();
  }
  static inline const Project* internal_default_instance() {
    return reinterpret_cast<const Project*>(
               &_Project_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Project& a, Project& b) {
    a.Swap(&b);
  }
  inline void Swap(Project* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Project* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Project* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Project>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Project& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Project& from) {
    Project::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Project* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DATA.Project";
  }
  protected:
  explicit Project(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVersionsFieldNumber = 5,
    kUserIDFieldNumber = 1,
    kProjectIDFieldNumber = 2,
    kProjectNameFieldNumber = 3,
    kCurrentVersionFieldNumber = 4,
  };
  // repeated .DATA.Version versions = 5;
  int versions_size() const;
  private:
  int _internal_versions_size() const;
  public:
  void clear_versions();
  ::DATA::Version* mutable_versions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DATA::Version >*
      mutable_versions();
  private:
  const ::DATA::Version& _internal_versions(int index) const;
  ::DATA::Version* _internal_add_versions();
  public:
  const ::DATA::Version& versions(int index) const;
  ::DATA::Version* add_versions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DATA::Version >&
      versions() const;

  // optional string userID = 1;
  bool has_userid() const;
  private:
  bool _internal_has_userid() const;
  public:
  void clear_userid();
  const std::string& userid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_userid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_userid();
  PROTOBUF_NODISCARD std::string* release_userid();
  void set_allocated_userid(std::string* userid);
  private:
  const std::string& _internal_userid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_userid(const std::string& value);
  std::string* _internal_mutable_userid();
  public:

  // optional string projectID = 2;
  bool has_projectid() const;
  private:
  bool _internal_has_projectid() const;
  public:
  void clear_projectid();
  const std::string& projectid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_projectid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_projectid();
  PROTOBUF_NODISCARD std::string* release_projectid();
  void set_allocated_projectid(std::string* projectid);
  private:
  const std::string& _internal_projectid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_projectid(const std::string& value);
  std::string* _internal_mutable_projectid();
  public:

  // optional string projectName = 3;
  bool has_projectname() const;
  private:
  bool _internal_has_projectname() const;
  public:
  void clear_projectname();
  const std::string& projectname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_projectname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_projectname();
  PROTOBUF_NODISCARD std::string* release_projectname();
  void set_allocated_projectname(std::string* projectname);
  private:
  const std::string& _internal_projectname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_projectname(const std::string& value);
  std::string* _internal_mutable_projectname();
  public:

  // optional int32 currentVersion = 4;
  bool has_currentversion() const;
  private:
  bool _internal_has_currentversion() const;
  public:
  void clear_currentversion();
  int32_t currentversion() const;
  void set_currentversion(int32_t value);
  private:
  int32_t _internal_currentversion() const;
  void _internal_set_currentversion(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:DATA.Project)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DATA::Version > versions_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr userid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr projectid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr projectname_;
    int32_t currentversion_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Workspace_2eproto;
};
// -------------------------------------------------------------------

class Workspace_ProjectsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Workspace_ProjectsEntry_DoNotUse, 
    std::string, ::DATA::Project,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Workspace_ProjectsEntry_DoNotUse, 
    std::string, ::DATA::Project,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  Workspace_ProjectsEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR Workspace_ProjectsEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit Workspace_ProjectsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Workspace_ProjectsEntry_DoNotUse& other);
  static const Workspace_ProjectsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Workspace_ProjectsEntry_DoNotUse*>(&_Workspace_ProjectsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "DATA.Workspace.ProjectsEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_Workspace_2eproto;
};

// -------------------------------------------------------------------

class Workspace final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DATA.Workspace) */ {
 public:
  inline Workspace() : Workspace(nullptr) {}
  ~Workspace() override;
  explicit PROTOBUF_CONSTEXPR Workspace(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Workspace(const Workspace& from);
  Workspace(Workspace&& from) noexcept
    : Workspace() {
    *this = ::std::move(from);
  }

  inline Workspace& operator=(const Workspace& from) {
    CopyFrom(from);
    return *this;
  }
  inline Workspace& operator=(Workspace&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Workspace& default_instance() {
    return *internal_default_instance();
  }
  static inline const Workspace* internal_default_instance() {
    return reinterpret_cast<const Workspace*>(
               &_Workspace_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Workspace& a, Workspace& b) {
    a.Swap(&b);
  }
  inline void Swap(Workspace* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Workspace* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Workspace* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Workspace>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Workspace& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Workspace& from) {
    Workspace::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Workspace* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DATA.Workspace";
  }
  protected:
  explicit Workspace(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kProjectsFieldNumber = 2,
    kUserIDFieldNumber = 1,
  };
  // map<string, .DATA.Project> projects = 2;
  int projects_size() const;
  private:
  int _internal_projects_size() const;
  public:
  void clear_projects();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::DATA::Project >&
      _internal_projects() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::DATA::Project >*
      _internal_mutable_projects();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::DATA::Project >&
      projects() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::DATA::Project >*
      mutable_projects();

  // optional string userID = 1;
  bool has_userid() const;
  private:
  bool _internal_has_userid() const;
  public:
  void clear_userid();
  const std::string& userid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_userid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_userid();
  PROTOBUF_NODISCARD std::string* release_userid();
  void set_allocated_userid(std::string* userid);
  private:
  const std::string& _internal_userid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_userid(const std::string& value);
  std::string* _internal_mutable_userid();
  public:

  // @@protoc_insertion_point(class_scope:DATA.Workspace)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        Workspace_ProjectsEntry_DoNotUse,
        std::string, ::DATA::Project,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> projects_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr userid_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Workspace_2eproto;
};
// -------------------------------------------------------------------

class GitNote_WorkspacesEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<GitNote_WorkspacesEntry_DoNotUse, 
    std::string, ::DATA::Workspace,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<GitNote_WorkspacesEntry_DoNotUse, 
    std::string, ::DATA::Workspace,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  GitNote_WorkspacesEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR GitNote_WorkspacesEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit GitNote_WorkspacesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const GitNote_WorkspacesEntry_DoNotUse& other);
  static const GitNote_WorkspacesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const GitNote_WorkspacesEntry_DoNotUse*>(&_GitNote_WorkspacesEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "DATA.GitNote.WorkspacesEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_Workspace_2eproto;
};

// -------------------------------------------------------------------

class GitNote final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DATA.GitNote) */ {
 public:
  inline GitNote() : GitNote(nullptr) {}
  ~GitNote() override;
  explicit PROTOBUF_CONSTEXPR GitNote(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GitNote(const GitNote& from);
  GitNote(GitNote&& from) noexcept
    : GitNote() {
    *this = ::std::move(from);
  }

  inline GitNote& operator=(const GitNote& from) {
    CopyFrom(from);
    return *this;
  }
  inline GitNote& operator=(GitNote&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GitNote& default_instance() {
    return *internal_default_instance();
  }
  static inline const GitNote* internal_default_instance() {
    return reinterpret_cast<const GitNote*>(
               &_GitNote_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(GitNote& a, GitNote& b) {
    a.Swap(&b);
  }
  inline void Swap(GitNote* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GitNote* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GitNote* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GitNote>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GitNote& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GitNote& from) {
    GitNote::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GitNote* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DATA.GitNote";
  }
  protected:
  explicit GitNote(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kWorkspacesFieldNumber = 1,
  };
  // map<string, .DATA.Workspace> workspaces = 1;
  int workspaces_size() const;
  private:
  int _internal_workspaces_size() const;
  public:
  void clear_workspaces();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::DATA::Workspace >&
      _internal_workspaces() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::DATA::Workspace >*
      _internal_mutable_workspaces();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::DATA::Workspace >&
      workspaces() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::DATA::Workspace >*
      mutable_workspaces();

  // @@protoc_insertion_point(class_scope:DATA.GitNote)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        GitNote_WorkspacesEntry_DoNotUse,
        std::string, ::DATA::Workspace,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> workspaces_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Workspace_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// File

// optional string name = 1;
inline bool File::_internal_has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool File::has_name() const {
  return _internal_has_name();
}
inline void File::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& File::name() const {
  // @@protoc_insertion_point(field_get:DATA.File.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void File::set_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:DATA.File.name)
}
inline std::string* File::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:DATA.File.name)
  return _s;
}
inline const std::string& File::_internal_name() const {
  return _impl_.name_.Get();
}
inline void File::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* File::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* File::release_name() {
  // @@protoc_insertion_point(field_release:DATA.File.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void File::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:DATA.File.name)
}

// repeated string lines = 2;
inline int File::_internal_lines_size() const {
  return _impl_.lines_.size();
}
inline int File::lines_size() const {
  return _internal_lines_size();
}
inline void File::clear_lines() {
  _impl_.lines_.Clear();
}
inline std::string* File::add_lines() {
  std::string* _s = _internal_add_lines();
  // @@protoc_insertion_point(field_add_mutable:DATA.File.lines)
  return _s;
}
inline const std::string& File::_internal_lines(int index) const {
  return _impl_.lines_.Get(index);
}
inline const std::string& File::lines(int index) const {
  // @@protoc_insertion_point(field_get:DATA.File.lines)
  return _internal_lines(index);
}
inline std::string* File::mutable_lines(int index) {
  // @@protoc_insertion_point(field_mutable:DATA.File.lines)
  return _impl_.lines_.Mutable(index);
}
inline void File::set_lines(int index, const std::string& value) {
  _impl_.lines_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:DATA.File.lines)
}
inline void File::set_lines(int index, std::string&& value) {
  _impl_.lines_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:DATA.File.lines)
}
inline void File::set_lines(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.lines_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:DATA.File.lines)
}
inline void File::set_lines(int index, const char* value, size_t size) {
  _impl_.lines_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:DATA.File.lines)
}
inline std::string* File::_internal_add_lines() {
  return _impl_.lines_.Add();
}
inline void File::add_lines(const std::string& value) {
  _impl_.lines_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:DATA.File.lines)
}
inline void File::add_lines(std::string&& value) {
  _impl_.lines_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:DATA.File.lines)
}
inline void File::add_lines(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.lines_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:DATA.File.lines)
}
inline void File::add_lines(const char* value, size_t size) {
  _impl_.lines_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:DATA.File.lines)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
File::lines() const {
  // @@protoc_insertion_point(field_list:DATA.File.lines)
  return _impl_.lines_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
File::mutable_lines() {
  // @@protoc_insertion_point(field_mutable_list:DATA.File.lines)
  return &_impl_.lines_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Version

// optional string versionID = 1;
inline bool Version::_internal_has_versionid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Version::has_versionid() const {
  return _internal_has_versionid();
}
inline void Version::clear_versionid() {
  _impl_.versionid_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Version::versionid() const {
  // @@protoc_insertion_point(field_get:DATA.Version.versionID)
  return _internal_versionid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Version::set_versionid(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.versionid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:DATA.Version.versionID)
}
inline std::string* Version::mutable_versionid() {
  std::string* _s = _internal_mutable_versionid();
  // @@protoc_insertion_point(field_mutable:DATA.Version.versionID)
  return _s;
}
inline const std::string& Version::_internal_versionid() const {
  return _impl_.versionid_.Get();
}
inline void Version::_internal_set_versionid(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.versionid_.Set(value, GetArenaForAllocation());
}
inline std::string* Version::_internal_mutable_versionid() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.versionid_.Mutable(GetArenaForAllocation());
}
inline std::string* Version::release_versionid() {
  // @@protoc_insertion_point(field_release:DATA.Version.versionID)
  if (!_internal_has_versionid()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.versionid_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.versionid_.IsDefault()) {
    _impl_.versionid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Version::set_allocated_versionid(std::string* versionid) {
  if (versionid != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.versionid_.SetAllocated(versionid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.versionid_.IsDefault()) {
    _impl_.versionid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:DATA.Version.versionID)
}

// optional string createdTime = 2;
inline bool Version::_internal_has_createdtime() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Version::has_createdtime() const {
  return _internal_has_createdtime();
}
inline void Version::clear_createdtime() {
  _impl_.createdtime_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Version::createdtime() const {
  // @@protoc_insertion_point(field_get:DATA.Version.createdTime)
  return _internal_createdtime();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Version::set_createdtime(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.createdtime_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:DATA.Version.createdTime)
}
inline std::string* Version::mutable_createdtime() {
  std::string* _s = _internal_mutable_createdtime();
  // @@protoc_insertion_point(field_mutable:DATA.Version.createdTime)
  return _s;
}
inline const std::string& Version::_internal_createdtime() const {
  return _impl_.createdtime_.Get();
}
inline void Version::_internal_set_createdtime(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.createdtime_.Set(value, GetArenaForAllocation());
}
inline std::string* Version::_internal_mutable_createdtime() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.createdtime_.Mutable(GetArenaForAllocation());
}
inline std::string* Version::release_createdtime() {
  // @@protoc_insertion_point(field_release:DATA.Version.createdTime)
  if (!_internal_has_createdtime()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.createdtime_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.createdtime_.IsDefault()) {
    _impl_.createdtime_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Version::set_allocated_createdtime(std::string* createdtime) {
  if (createdtime != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.createdtime_.SetAllocated(createdtime, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.createdtime_.IsDefault()) {
    _impl_.createdtime_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:DATA.Version.createdTime)
}

// optional int32 versionNumber = 3;
inline bool Version::_internal_has_versionnumber() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Version::has_versionnumber() const {
  return _internal_has_versionnumber();
}
inline void Version::clear_versionnumber() {
  _impl_.versionnumber_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline int32_t Version::_internal_versionnumber() const {
  return _impl_.versionnumber_;
}
inline int32_t Version::versionnumber() const {
  // @@protoc_insertion_point(field_get:DATA.Version.versionNumber)
  return _internal_versionnumber();
}
inline void Version::_internal_set_versionnumber(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.versionnumber_ = value;
}
inline void Version::set_versionnumber(int32_t value) {
  _internal_set_versionnumber(value);
  // @@protoc_insertion_point(field_set:DATA.Version.versionNumber)
}

// optional int32 opsNumber = 4;
inline bool Version::_internal_has_opsnumber() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Version::has_opsnumber() const {
  return _internal_has_opsnumber();
}
inline void Version::clear_opsnumber() {
  _impl_.opsnumber_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline int32_t Version::_internal_opsnumber() const {
  return _impl_.opsnumber_;
}
inline int32_t Version::opsnumber() const {
  // @@protoc_insertion_point(field_get:DATA.Version.opsNumber)
  return _internal_opsnumber();
}
inline void Version::_internal_set_opsnumber(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.opsnumber_ = value;
}
inline void Version::set_opsnumber(int32_t value) {
  _internal_set_opsnumber(value);
  // @@protoc_insertion_point(field_set:DATA.Version.opsNumber)
}

// map<string, .DATA.File> files = 5;
inline int Version::_internal_files_size() const {
  return _impl_.files_.size();
}
inline int Version::files_size() const {
  return _internal_files_size();
}
inline void Version::clear_files() {
  _impl_.files_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::DATA::File >&
Version::_internal_files() const {
  return _impl_.files_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::DATA::File >&
Version::files() const {
  // @@protoc_insertion_point(field_map:DATA.Version.files)
  return _internal_files();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::DATA::File >*
Version::_internal_mutable_files() {
  return _impl_.files_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::DATA::File >*
Version::mutable_files() {
  // @@protoc_insertion_point(field_mutable_map:DATA.Version.files)
  return _internal_mutable_files();
}

// -------------------------------------------------------------------

// Project

// optional string userID = 1;
inline bool Project::_internal_has_userid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Project::has_userid() const {
  return _internal_has_userid();
}
inline void Project::clear_userid() {
  _impl_.userid_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Project::userid() const {
  // @@protoc_insertion_point(field_get:DATA.Project.userID)
  return _internal_userid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Project::set_userid(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.userid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:DATA.Project.userID)
}
inline std::string* Project::mutable_userid() {
  std::string* _s = _internal_mutable_userid();
  // @@protoc_insertion_point(field_mutable:DATA.Project.userID)
  return _s;
}
inline const std::string& Project::_internal_userid() const {
  return _impl_.userid_.Get();
}
inline void Project::_internal_set_userid(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.userid_.Set(value, GetArenaForAllocation());
}
inline std::string* Project::_internal_mutable_userid() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.userid_.Mutable(GetArenaForAllocation());
}
inline std::string* Project::release_userid() {
  // @@protoc_insertion_point(field_release:DATA.Project.userID)
  if (!_internal_has_userid()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.userid_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.userid_.IsDefault()) {
    _impl_.userid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Project::set_allocated_userid(std::string* userid) {
  if (userid != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.userid_.SetAllocated(userid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.userid_.IsDefault()) {
    _impl_.userid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:DATA.Project.userID)
}

// optional string projectID = 2;
inline bool Project::_internal_has_projectid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Project::has_projectid() const {
  return _internal_has_projectid();
}
inline void Project::clear_projectid() {
  _impl_.projectid_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Project::projectid() const {
  // @@protoc_insertion_point(field_get:DATA.Project.projectID)
  return _internal_projectid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Project::set_projectid(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.projectid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:DATA.Project.projectID)
}
inline std::string* Project::mutable_projectid() {
  std::string* _s = _internal_mutable_projectid();
  // @@protoc_insertion_point(field_mutable:DATA.Project.projectID)
  return _s;
}
inline const std::string& Project::_internal_projectid() const {
  return _impl_.projectid_.Get();
}
inline void Project::_internal_set_projectid(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.projectid_.Set(value, GetArenaForAllocation());
}
inline std::string* Project::_internal_mutable_projectid() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.projectid_.Mutable(GetArenaForAllocation());
}
inline std::string* Project::release_projectid() {
  // @@protoc_insertion_point(field_release:DATA.Project.projectID)
  if (!_internal_has_projectid()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.projectid_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.projectid_.IsDefault()) {
    _impl_.projectid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Project::set_allocated_projectid(std::string* projectid) {
  if (projectid != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.projectid_.SetAllocated(projectid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.projectid_.IsDefault()) {
    _impl_.projectid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:DATA.Project.projectID)
}

// optional string projectName = 3;
inline bool Project::_internal_has_projectname() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Project::has_projectname() const {
  return _internal_has_projectname();
}
inline void Project::clear_projectname() {
  _impl_.projectname_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& Project::projectname() const {
  // @@protoc_insertion_point(field_get:DATA.Project.projectName)
  return _internal_projectname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Project::set_projectname(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000004u;
 _impl_.projectname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:DATA.Project.projectName)
}
inline std::string* Project::mutable_projectname() {
  std::string* _s = _internal_mutable_projectname();
  // @@protoc_insertion_point(field_mutable:DATA.Project.projectName)
  return _s;
}
inline const std::string& Project::_internal_projectname() const {
  return _impl_.projectname_.Get();
}
inline void Project::_internal_set_projectname(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.projectname_.Set(value, GetArenaForAllocation());
}
inline std::string* Project::_internal_mutable_projectname() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.projectname_.Mutable(GetArenaForAllocation());
}
inline std::string* Project::release_projectname() {
  // @@protoc_insertion_point(field_release:DATA.Project.projectName)
  if (!_internal_has_projectname()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* p = _impl_.projectname_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.projectname_.IsDefault()) {
    _impl_.projectname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Project::set_allocated_projectname(std::string* projectname) {
  if (projectname != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.projectname_.SetAllocated(projectname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.projectname_.IsDefault()) {
    _impl_.projectname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:DATA.Project.projectName)
}

// optional int32 currentVersion = 4;
inline bool Project::_internal_has_currentversion() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Project::has_currentversion() const {
  return _internal_has_currentversion();
}
inline void Project::clear_currentversion() {
  _impl_.currentversion_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline int32_t Project::_internal_currentversion() const {
  return _impl_.currentversion_;
}
inline int32_t Project::currentversion() const {
  // @@protoc_insertion_point(field_get:DATA.Project.currentVersion)
  return _internal_currentversion();
}
inline void Project::_internal_set_currentversion(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.currentversion_ = value;
}
inline void Project::set_currentversion(int32_t value) {
  _internal_set_currentversion(value);
  // @@protoc_insertion_point(field_set:DATA.Project.currentVersion)
}

// repeated .DATA.Version versions = 5;
inline int Project::_internal_versions_size() const {
  return _impl_.versions_.size();
}
inline int Project::versions_size() const {
  return _internal_versions_size();
}
inline void Project::clear_versions() {
  _impl_.versions_.Clear();
}
inline ::DATA::Version* Project::mutable_versions(int index) {
  // @@protoc_insertion_point(field_mutable:DATA.Project.versions)
  return _impl_.versions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DATA::Version >*
Project::mutable_versions() {
  // @@protoc_insertion_point(field_mutable_list:DATA.Project.versions)
  return &_impl_.versions_;
}
inline const ::DATA::Version& Project::_internal_versions(int index) const {
  return _impl_.versions_.Get(index);
}
inline const ::DATA::Version& Project::versions(int index) const {
  // @@protoc_insertion_point(field_get:DATA.Project.versions)
  return _internal_versions(index);
}
inline ::DATA::Version* Project::_internal_add_versions() {
  return _impl_.versions_.Add();
}
inline ::DATA::Version* Project::add_versions() {
  ::DATA::Version* _add = _internal_add_versions();
  // @@protoc_insertion_point(field_add:DATA.Project.versions)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DATA::Version >&
Project::versions() const {
  // @@protoc_insertion_point(field_list:DATA.Project.versions)
  return _impl_.versions_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Workspace

// optional string userID = 1;
inline bool Workspace::_internal_has_userid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Workspace::has_userid() const {
  return _internal_has_userid();
}
inline void Workspace::clear_userid() {
  _impl_.userid_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Workspace::userid() const {
  // @@protoc_insertion_point(field_get:DATA.Workspace.userID)
  return _internal_userid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Workspace::set_userid(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.userid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:DATA.Workspace.userID)
}
inline std::string* Workspace::mutable_userid() {
  std::string* _s = _internal_mutable_userid();
  // @@protoc_insertion_point(field_mutable:DATA.Workspace.userID)
  return _s;
}
inline const std::string& Workspace::_internal_userid() const {
  return _impl_.userid_.Get();
}
inline void Workspace::_internal_set_userid(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.userid_.Set(value, GetArenaForAllocation());
}
inline std::string* Workspace::_internal_mutable_userid() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.userid_.Mutable(GetArenaForAllocation());
}
inline std::string* Workspace::release_userid() {
  // @@protoc_insertion_point(field_release:DATA.Workspace.userID)
  if (!_internal_has_userid()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.userid_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.userid_.IsDefault()) {
    _impl_.userid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Workspace::set_allocated_userid(std::string* userid) {
  if (userid != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.userid_.SetAllocated(userid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.userid_.IsDefault()) {
    _impl_.userid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:DATA.Workspace.userID)
}

// map<string, .DATA.Project> projects = 2;
inline int Workspace::_internal_projects_size() const {
  return _impl_.projects_.size();
}
inline int Workspace::projects_size() const {
  return _internal_projects_size();
}
inline void Workspace::clear_projects() {
  _impl_.projects_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::DATA::Project >&
Workspace::_internal_projects() const {
  return _impl_.projects_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::DATA::Project >&
Workspace::projects() const {
  // @@protoc_insertion_point(field_map:DATA.Workspace.projects)
  return _internal_projects();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::DATA::Project >*
Workspace::_internal_mutable_projects() {
  return _impl_.projects_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::DATA::Project >*
Workspace::mutable_projects() {
  // @@protoc_insertion_point(field_mutable_map:DATA.Workspace.projects)
  return _internal_mutable_projects();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// GitNote

// map<string, .DATA.Workspace> workspaces = 1;
inline int GitNote::_internal_workspaces_size() const {
  return _impl_.workspaces_.size();
}
inline int GitNote::workspaces_size() const {
  return _internal_workspaces_size();
}
inline void GitNote::clear_workspaces() {
  _impl_.workspaces_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::DATA::Workspace >&
GitNote::_internal_workspaces() const {
  return _impl_.workspaces_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::DATA::Workspace >&
GitNote::workspaces() const {
  // @@protoc_insertion_point(field_map:DATA.GitNote.workspaces)
  return _internal_workspaces();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::DATA::Workspace >*
GitNote::_internal_mutable_workspaces() {
  return _impl_.workspaces_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::DATA::Workspace >*
GitNote::mutable_workspaces() {
  // @@protoc_insertion_point(field_mutable_map:DATA.GitNote.workspaces)
  return _internal_mutable_workspaces();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace DATA

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Workspace_2eproto
